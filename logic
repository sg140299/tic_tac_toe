package GameDevelopment;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

// java swing framework is used to fulfill the desktop applications using java
//java affix also used

public class TicTacToe extends JFrame implements ActionListener {
	public static int BOARD_SIZE=3;
	
	public static enum GameStatus {
		Incomplete, XWin, ZWin, Tie 
	}
	private JButton[][] buttons=new JButton[BOARD_SIZE][BOARD_SIZE];
	boolean crossTurn=true;
	public TicTacToe() {
		super.setTitle("TicTacToe");
		super.setSize(800,800);
		
		GridLayout grid=new GridLayout(BOARD_SIZE,BOARD_SIZE);
		super.setLayout(grid);
		Font font=new Font("Black",1,150);
		for(int row=0;row<BOARD_SIZE;row++) {
			for(int col=0;col<BOARD_SIZE;col++) {
				JButton button=new JButton(""); 
				buttons[row][col]=button;
				button.setFont(font);
				button.addActionListener(this);
				super.add(button);
			}
		}
		super.setResizable(false);
		super.setVisible(true);
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
		JButton clickedButton=(JButton)e.getSource();
		makeButton(clickedButton);
		GameStatus status=this.getGameStatus();
		if(status==GameStatus.Incomplete) {
			return;
		}
		declareWinner(status);
		int choice=JOptionPane.showConfirmDialog(this, "Do you want to restart the game !!");
		if(choice==JOptionPane.YES_OPTION) {
			int row,col;
			for(row=0;row<BOARD_SIZE;row++) {
				for(col=0;col<BOARD_SIZE;col++) {
					buttons[row][col].setText("");;
				}
			}
			crossTurn=true;
		}
		else {
			super.dispose();
		}
		
	}
	private void declareWinner(GameStatus status) {
		// TODO Auto-generated method stub
		if(status==GameStatus.XWin) {
			JOptionPane.showMessageDialog(this, "X Wins");
		}
		else if(status==GameStatus.ZWin) {
			JOptionPane.showMessageDialog(this, "0 Wins");
		}
		else if(status==GameStatus.Tie) {
			JOptionPane.showMessageDialog(this, "It is a tie ");
		}
		
		
	}
	private GameStatus getGameStatus() {
		// TODO Auto-generated method stub
		String text1="",text2="";
		int row,col=0;
		row=0;
		while(row<BOARD_SIZE) {
			col=0;
			while(col<BOARD_SIZE-1) {
				text1=buttons[row][col].getText();
				text2=buttons[row][col+1].getText();
				if(!text1.equals(text2)||text1.length()==0) {
					break;
				}
				col++;
				
			}
			if(col==BOARD_SIZE-1) {
				if(text1.equals("X")) {
					return GameStatus.XWin;
				}
				else {
					return GameStatus.ZWin;
				}
			}
			row++;
		}
		//text inside columns
		col=0;
		while(col<BOARD_SIZE) {
			row=0;
			while(row<BOARD_SIZE-1) {
				text1=buttons[row][col].getText();
				text2=buttons[row+1][col].getText();
				if(!text1.equals(text2)||text1.length()==0) {
					break;
				}
				row++;
				
			}
			if(row==BOARD_SIZE-1) {
				if(text1.equals("X")) {
					return GameStatus.XWin;
				}
				else {
					return GameStatus.ZWin;
				}
			}
			col++;
		}
		//diagnol 1   
		row=0;
		col=0;
		while(row<BOARD_SIZE-1) {
			text1=buttons[row][col].getText();
			text2=buttons[row+1][col+1].getText();
			if(!text1.equals(text2)||text1.length()==0) {
				break;
			}
			row++;
			col++;
		}
		if(row==BOARD_SIZE-1) {
			if(text1.equals("X")) {
				return GameStatus.XWin;
			}
			else {
				return GameStatus.ZWin;
			}
		}
		
		//diagnol 2
		row=BOARD_SIZE-1;
		col=0;
		while(row>0) {
			text1=buttons[row][col].getText();
			text2=buttons[row-1][col+1].getText();
			if(!text1.equals(text2)||text1.length()==0) {
				break;
			}
			row--;
			col++;
		}
		if(row==0) {
			if(text1.equals("X")) {
				return GameStatus.XWin;
			}
			else {
				return GameStatus.ZWin;
			}
		}
		//no winner
		String txt="";
		for(row=0;row<BOARD_SIZE;row++) {
			for(col=0;col<BOARD_SIZE;col++) {
				txt=buttons[row][col].getText();
				if(txt.length()==0) {
					return GameStatus.Incomplete;
				}
				
			}
		}
		return GameStatus.Tie;
		
	}
	private void makeButton(JButton clickedButton) {
		// TODO Auto-generated method stub
		String btntext=clickedButton.getText();
		if(btntext.length()>0) {
			JOptionPane.showMessageDialog(this, "Invalid Move");
			
		}
		else {
			if(crossTurn) {
				clickedButton.setText("X");
			}
			else {
				clickedButton.setText("O");
			}
			crossTurn=!crossTurn;
		}
		
		
	}
	

}

